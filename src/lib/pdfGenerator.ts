/**
 * PDF Generation utilities for travel briefs
 */

export interface PDFGenerationOptions {
  title: string;
  html: string;
  filename?: string;
}

/**
 * Generate PDF using browser's print functionality
 * This is the most reliable cross-browser method
 */
export async function generatePDFWithPrint(html: string, filename: string = 'travel-brief.pdf'): Promise<void> {
  return new Promise((resolve, reject) => {
    try {
      // Create a new window for printing
      const printWindow = window.open('', '_blank');
      
      if (!printWindow) {
        reject(new Error('Could not open print window. Please allow popups for this site.'));
        return;
      }

      // Write the HTML content
      printWindow.document.write(html);
      printWindow.document.close();

      // Wait for content to load
      printWindow.onload = () => {
        // Focus the window and trigger print
        printWindow.focus();
        printWindow.print();
        
        // Close the window after a short delay
        setTimeout(() => {
          printWindow.close();
          resolve();
        }, 1000);
      };

      // Handle errors
      printWindow.onerror = () => {
        printWindow.close();
        reject(new Error('Failed to load content for printing'));
      };

    } catch (error) {
      reject(error);
    }
  });
}

/**
 * Download HTML as text file (fallback method)
 */
export function downloadAsText(html: string, filename: string = 'travel-brief.txt'): void {
  try {
    // Create a temporary div to extract text content
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    const textContent = tempDiv.textContent || tempDiv.innerText || '';

    // Create and download the file
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Failed to download as text:', error);
    throw error;
  }
}

/**
 * Open HTML in new window for viewing
 */
export function openInNewWindow(html: string, title: string = 'Travel Brief'): void {
  try {
    const newWindow = window.open('', '_blank');
    
    if (!newWindow) {
      throw new Error('Could not open new window. Please allow popups for this site.');
    }

    newWindow.document.write(html);
    newWindow.document.title = title;
    newWindow.document.close();
    
    // Focus the new window
    newWindow.focus();
  } catch (error) {
    console.error('Failed to open in new window:', error);
    throw error;
  }
}

/**
 * Generate PDF using a professional PDF service (if available)
 * This would integrate with services like PDFShift, Puppeteer, etc.
 */
export async function generatePDFWithService(
  html: string, 
  filename: string = 'travel-brief.pdf',
  serviceUrl?: string
): Promise<Blob | null> {
  
  if (!serviceUrl) {
    // No service configured, fallback to print method
    await generatePDFWithPrint(html, filename);
    return null;
  }

  try {
    const response = await fetch(serviceUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        html: html,
        filename: filename,
        options: {
          format: 'A4',
          margin: {
            top: '20mm',
            right: '20mm',
            bottom: '20mm',
            left: '20mm'
          },
          printBackground: true,
          displayHeaderFooter: true,
          headerTemplate: '<div style="font-size: 10px; text-align: center; width: 100%;">Travel Pack AI</div>',
          footerTemplate: '<div style="font-size: 10px; text-align: center; width: 100%;">Generated by TravelPack.ai</div>'
        }
      })
    });

    if (!response.ok) {
      throw new Error(`PDF service error: ${response.statusText}`);
    }

    return await response.blob();
  } catch (error) {
    console.error('PDF service failed, falling back to print method:', error);
    await generatePDFWithPrint(html, filename);
    return null;
  }
}

/**
 * Enhanced HTML template for better PDF generation
 */
export function enhanceHTMLForPDF(html: string): string {
  // Add PDF-specific styles
  const pdfStyles = `
    <style>
      @media print {
        body {
          -webkit-print-color-adjust: exact;
          color-adjust: exact;
          print-color-adjust: exact;
        }
        
        .container {
          max-width: none !important;
          margin: 0 !important;
          padding: 20px !important;
          box-shadow: none !important;
        }
        
        .header {
          break-inside: avoid;
          page-break-inside: avoid;
        }
        
        .content-section {
          break-inside: avoid;
          page-break-inside: avoid;
          margin-bottom: 20px !important;
        }
        
        .trip-summary {
          break-inside: avoid;
          page-break-inside: avoid;
        }
        
        .footer {
          break-inside: avoid;
          page-break-inside: avoid;
        }
        
        /* Ensure gradients work in print */
        .header, .footer {
          background: #667eea !important;
        }
        
        /* Better typography for print */
        body {
          font-size: 12pt;
          line-height: 1.4;
        }
        
        h1 { font-size: 18pt; }
        h2 { font-size: 16pt; }
        h3 { font-size: 14pt; }
        h4 { font-size: 12pt; }
      }
    </style>
  `;

  // Insert styles before closing head tag
  return html.replace('</head>', pdfStyles + '</head>');
}