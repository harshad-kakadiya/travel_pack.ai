import { corsHeaders } from '../_shared/cors.ts';
import { createClient } from 'npm:@supabase/supabase-js@2';
import QRCode from 'npm:qrcode@1.5.3';
import { checkRateLimit, getClientIP, createRateLimitResponse } from '../_shared/rate-limit.ts';

interface GenerateBriefRequest {
  client_reference_id: string;
  force?: boolean;
}

interface TripData {
  persona: string;
  passport_country_code: string;
  passport_country_label: string;
  start_date: string;
  end_date: string;
  destinations: Array<{
    cityName: string;
    country?: string;
    daysAllocated: number;
  }>;
  group_size?: number;
  budget?: string;
  activity_preferences?: string[];
  ages?: string;
  booking_data?: any;
}

const TRAVEL_PACK_SYSTEM_PROMPT = `You are Travel Pack, a world-class travel researcher and concierge. Generate a complete, premium-quality travel brief following this EXACT PDF design specification:

============================================================
# PDF DESIGN SPECIFICATION (FINAL)
============================================================

## General Styling
- Font: Modern sans-serif (Inter, Roboto, or system fonts)
- Colors: Headings → dark navy (#1A1A2E); Subheadings → section accent colors; Cards → light pastel backgrounds
- Layout: Card-based design, 2-column when possible for better readability
- Emojis/icons: Integrated for all categories (✈️, 🏨, 🍽️, 🛡️, 🎒, 🗓️, etc.)
- Offline PDF-ready: No external dependencies, all styles inline

## Cover Page
- Title: "Travel Pack for [Destination(s)]"
- Subtitle: Travel dates and persona
- Background: Gradient or travel-themed styling
- Tagline: "Generated by TravelPack.ai — Your Trip, Planned in Minutes"

## Intro Section
- 2-3 sentence overview of destination(s)
- Persona badge display
- Trip overview with key highlights

## Daily Itinerary (Day by Day)
- Header: 🗓️ Day X: [Descriptive Title]
- Activities formatted with:
  • ⏰ Time slots
  • Emoji for activity type
  • Bold activity title
  • Clear description
  • 💰 Cost estimate
  • "Why?" explanation (short, italic, user-friendly)

## Activity Recommendations
- Grouped by user's selected activity preferences (Shopping 🛍️, Culture 🏛️, Nightlife 🌃, Nature 🏞️, etc.)
- Each recommendation includes:
  • 1-2 curated examples with description
  • Cost estimate
  • "Why?" explanation
  • Alternative options when possible

## Food & Dining
- Local specialties with emojis (🍜, 🍣, 🍺, etc.)
- 1-2 recommended restaurants per meal type
- Each with "Why?" explanation
- Approximate budget per person
- 1-2 alternative options for different budgets/tastes

## Packing Checklist
- Split into themed cards:
  • Climate-specific 🌦️
  • Travel essentials 🎒
  • Activity-specific gear 🏖️
- Checkbox formatting (☑️ / ☐)
- Persona-specific additions

## Safety & Emergency Info
- 🚨 Local emergency numbers
- 🏥 Hospital information (name, address, phone)
- 🛂 Embassy contact details for traveler's passport country
- 🚓 Tourist police (if available)
- Safety tips card with persona-specific notes (scams, customs, solo/female-specific guidance)

## Visa & Documentation
- Passport/visa requirements specific to traveler's nationality
- Travel insurance reminders
- Documentation checklist

## Budget Overview
- Table format with estimated costs:
  • 🏨 Accommodation (per night)
  • 🍽️ Meals (per day)
  • 🚕 Transport (per day)
  • 🎟️ Activities (per activity)
- Daily and total trip estimates

## Offline Language Support
- Essential phrases in format: "English → Local Language (Phonetic)"
- Example: "Hello → こんにちは (Kon-ni-chi-wa)"
- 10-15 most useful phrases for travelers

## Persona-Specific Add-ons
- Solo Female → Enhanced safety notes, vetted accommodations, cultural dress codes
- Families → Child-friendly activities, health preparation, family logistics
- New Travelers → Airport navigation, customs guidance, cultural basics
- Experienced Travelers → Efficiency hacks, hidden gems, insider tips
- Under 18 → Legal requirements, guardian documentation, special considerations

## Final Page
- TravelPack.ai branding
- QR code linking to travelpack.ai
- Support contact: support@travelpack.ai
- Disclaimer: "Information generated by AI. Please verify details before travel."

============================================================
# CONTENT REQUIREMENTS
============================================================

1. **Specificity**: Always name real places, restaurants, and activities with concrete details
2. **Freshness**: Only include currently open venues and up-to-date information
3. **Personalization**: Tailor every recommendation to the user's persona, budget, and activity preferences
4. **Practicality**: Include specific costs, timing, booking requirements, and logistics
5. **Safety**: Provide relevant safety information based on destination and persona
6. **Cultural Sensitivity**: Include appropriate cultural guidance and etiquette
7. **Completeness**: Cover every day of the trip with detailed recommendations

============================================================
# OUTPUT FORMAT
============================================================

Output ONLY HTML with inline CSS styling. No explanations or commentary.
Structure the content exactly as specified above.
Use semantic HTML elements and ensure PDF-friendly formatting.
Include all specified sections in the exact order listed.
Make it visually appealing with proper spacing, colors, and typography.`;

// Function to generate QR code as base64 data URL
async function generateQRCode(text: string): Promise<string> {
  try {
    const qrCodeDataURL = await QRCode.toDataURL(text, {
      width: 120,
      margin: 1,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });
    return qrCodeDataURL;
  } catch (error) {
    console.error('Error generating QR code:', error);
    return '';
  }
}

// Function to create Google Maps URL for a location
function createMapsUrl(locationName: string, cityName?: string): string {
  const query = cityName ? `${locationName}, ${cityName}` : locationName;
  return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(query)}`;
}

// Function to enhance HTML with QR codes for locations
async function enhanceHtmlWithQRCodes(htmlContent: string, destinations: any[]): Promise<string> {
  let enhancedHtml = htmlContent;
  
  // Common location patterns to look for in the HTML
  const locationPatterns = [
    // Match location names in various contexts
    /<p[^>]*>([^<]*(?:Museum|Cathedral|Palace|Tower|Square|Park|Market|Temple|Church|Castle|Bridge|Gallery|Stadium|Theater|Theatre|Opera|Library|University|Station|Airport|Beach|Lake|Mountain|Hill|Garden|Zoo|Aquarium|Observatory|Monument|Memorial|Fountain|Plaza|Avenue|Street|Road|Boulevard)[^<]*)<\/p>/gi,
    // Match attraction names with "Why?" explanations
    /<p[^>]*>([^<]*(?:visit|see|explore|discover)[^<]*(?:Museum|Cathedral|Palace|Tower|Square|Park|Market|Temple|Church|Castle|Bridge|Gallery|Stadium|Theater|Theatre|Opera|Library|University|Station|Airport|Beach|Lake|Mountain|Hill|Garden|Zoo|Aquarium|Observatory|Monument|Memorial|Fountain|Plaza|Avenue|Street|Road|Boulevard)[^<]*)<\/p>/gi,
    // Match restaurant/food venue names
    /<p[^>]*>([^<]*(?:Restaurant|Café|Cafe|Bar|Bistro|Tavern|Pub|Brewery|Bakery|Pizzeria|Trattoria|Brasserie|Deli|Market|Food|Dining)[^<]*)<\/p>/gi
  ];

  // Process each destination city for context
  for (const destination of destinations) {
    const cityName = destination.cityName;
    
    // Apply each pattern
    for (const pattern of locationPatterns) {
      const matches = [...enhancedHtml.matchAll(pattern)];
      
      for (const match of matches) {
        const fullMatch = match[0];
        const locationText = match[1];
        
        // Skip if already processed (contains QR code)
        if (fullMatch.includes('qr-code-container')) {
          continue;
        }
        
        // Extract the main location name (first part before comma or dash)
        const locationName = locationText.split(/[,\-–—]/)[0].trim();
        
        // Skip very short or generic text
        if (locationName.length < 5 || 
            locationName.toLowerCase().includes('why?') ||
            locationName.toLowerCase().includes('justification') ||
            /^(the|a|an|this|that|visit|see|explore)\s/i.test(locationName)) {
          continue;
        }
        
        try {
          // Generate Google Maps URL
          const mapsUrl = createMapsUrl(locationName, cityName);
          
          // Generate QR code
          const qrCodeDataUrl = await generateQRCode(mapsUrl);
          
          if (qrCodeDataUrl) {
            // Create enhanced HTML with QR code
            const enhancedBlock = `
              <div class="location-block">
                ${fullMatch}
                <div class="qr-code-container" style="margin: 10px 0; text-align: center;">
                  <img src="${qrCodeDataUrl}" alt="QR Code for ${locationName}" style="width: 120px; height: 120px; border: 1px solid #e5e7eb; border-radius: 4px;">
                  <p class="qr-caption" style="font-size: 12px; color: #6b7280; margin: 5px 0 0 0;">Scan to open in Maps</p>
                </div>
              </div>
            `;
            
            // Replace the original match with enhanced version
            enhancedHtml = enhancedHtml.replace(fullMatch, enhancedBlock);
          }
        } catch (error) {
          console.error(`Error processing location "${locationName}":`, error);
        }
      }
    }
  }
  
  return enhancedHtml;
}

// Function to render PDF using PDFShift
async function renderPdfWithPdfShift(html: string): Promise<Uint8Array> {
  const apiKey = Deno.env.get("PDFSHIFT_API_KEY");
  if (!apiKey) throw new Error("Missing PDFSHIFT_API_KEY");

  const res = await fetch("https://api.pdfshift.io/v3/convert/pdf", {
    method: "POST",
    headers: {
      "Authorization": "Basic " + btoa(`${apiKey}:`),
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      source: html,
      sandbox: false,
      use_print: true,
      landscape: false,
      margin: { top: "15mm", right: "12mm", bottom: "15mm", left: "12mm" },
      format: "A4",
      print_background: true
    }),
  });

  if (!res.ok) {
    const errTxt = await res.text();
    throw new Error(`PDFShift failed (${res.status}): ${errTxt}`);
  }
  return new Uint8Array(await res.arrayBuffer());
}

// Function to render PDF using DocRaptor (fallback)
async function renderPdfWithDocRaptor(html: string): Promise<Uint8Array> {
  const key = Deno.env.get("DOC_RAPTOR_API_KEY");
  if (!key) throw new Error("Missing DOC_RAPTOR_API_KEY");
  
  const res = await fetch("https://docraptor.com/docs", {
    method: "POST",
    headers: {
      "Authorization": "Basic " + btoa(`${key}:`),
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      test: false,
      name: "travelpack.pdf",
      document_type: "pdf",
      document_content: html,
      prince_options: {
        media: "print",
        baseurl: "https://travelpack.ai/"
      }
    }),
  });
  
  if (!res.ok) {
    const errTxt = await res.text();
    throw new Error(`DocRaptor failed (${res.status}): ${errTxt}`);
  }
  return new Uint8Array(await res.arrayBuffer());
}

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Rate limiting: 5 requests per 10 minutes per IP (more restrictive due to resource intensity)
    const clientIP = getClientIP(req);
    const rateLimitResult = await checkRateLimit(clientIP, 5, 600000); // 5 requests per 10 minutes
    
    if (!rateLimitResult.allowed) {
      console.log(`Rate limit exceeded for travel brief generation, IP ${clientIP}`);
      return createRateLimitResponse(rateLimitResult);
    }

    const { client_reference_id, force = false }: GenerateBriefRequest = await req.json();

    if (!client_reference_id) {
      return new Response(
        JSON.stringify({ error: 'Missing client_reference_id' }),
        { 
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Check authorization
    const adminEmail = req.headers.get('x-admin-email');
    const isAdmin = Deno.env.get('VITE_IS_ADMIN') === 'true';
    const adminWhitelist = Deno.env.get('VITE_ADMIN_WHITELIST')?.split(',').map(e => e.trim()) || [];
    const isAdminForced = force && isAdmin && adminEmail && adminWhitelist.includes(adminEmail);

    // Load pending session data
    const { data: sessionData, error: sessionError } = await supabase
      .from('pending_sessions')
      .select('*')
      .eq('id', client_reference_id)
      .single();

    if (sessionError || !sessionData) {
      return new Response(
        JSON.stringify({ error: 'Session not found' }),
        { 
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Check payment status or admin bypass
    if (!sessionData.has_paid && !isAdminForced) {
      return new Response(
        JSON.stringify({ error: 'Payment required' }),
        { 
          status: 403,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Check if already generated
    const { data: existingBrief } = await supabase
      .from('travel_briefs')
      .select('html_url, pdf_url')
      .eq('pending_session_id', client_reference_id)
      .single();

    if (existingBrief && !force) {
      return new Response(
        JSON.stringify({
          html_url: existingBrief.html_url,
          pdf_url: existingBrief.pdf_url,
          cached: true
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Update status to generating
    await supabase
      .from('pending_sessions')
      .update({ status: 'generating' })
      .eq('id', client_reference_id);

    // Load booking data if available
    const { data: bookingData } = await supabase
      .from('booking_data')
      .select('extracted')
      .eq('pending_session_id', client_reference_id);

    // Build user context for GPT
    const tripData: TripData = {
      persona: sessionData.persona, // This is fine, it's the persona type
      passport_country_code: sessionData.passport_country_code,
      passport_country_label: sessionData.passport_country_label,
      start_date: sessionData.start_date,
      end_date: sessionData.end_date,
      destinations: sessionData.destinations || [],
      group_size: sessionData.group_size,
      budget: sessionData.budget,
      activity_preferences: sessionData.activity_preferences || [],
      ages: sessionData.ages,
      booking_data: bookingData?.map(d => d.extracted) || []
    };

    // Calculate trip duration
    const startDate = new Date(tripData.start_date);
    const endDate = new Date(tripData.end_date);
    const tripDuration = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;

    // Format destinations for display
    const destinationNames = tripData.destinations.map(d => d.cityName).join(', ');

    const userContext = `
TRAVELER PROFILE:
- Persona: ${tripData.persona}
- Passport Country: ${tripData.passport_country_label} (${tripData.passport_country_code})
- Travel Dates: ${tripData.start_date} to ${tripData.end_date}
- Trip Duration: ${tripDuration} days
- Destinations: ${destinationNames}
- Group Size: ${tripData.group_size || 1} ${tripData.group_size === 1 ? 'person' : 'people'}
- Budget Level: ${tripData.budget || 'Not specified'}
${tripData.ages ? `- Ages: ${tripData.ages}` : ''}

${tripData.activity_preferences && tripData.activity_preferences.length > 0 ? `
ACTIVITY PREFERENCES:
${tripData.activity_preferences.map(pref => `- ${pref}`).join('\n')}
` : ''}

DESTINATIONS & DURATION:
${tripData.destinations.map(dest => 
  `- ${dest.cityName}${dest.country ? `, ${dest.country}` : ''}: ${dest.daysAllocated} day${dest.daysAllocated !== 1 ? 's' : ''}`
).join('\n')}

${tripData.booking_data && tripData.booking_data.length > 0 ? `
BOOKING DATA:
${JSON.stringify(tripData.booking_data, null, 2)}
` : ''}

Generate a complete travel brief following the PDF design specification above. Ensure all recommendations are current and accurate.`;

    // Call OpenAI GPT-4
    const openaiApiKey = Deno.env.get('VITE_OPENAI_API_KEY');
    const openaiApiKey = Deno.env.get('VITE_OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o', // Using latest GPT-4o model
        messages: [
          {
            role: 'system',
            content: TRAVEL_PACK_SYSTEM_PROMPT
          },
          {
            role: 'user',
            content: userContext
          }
        ],
        max_tokens: 4000,
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.text();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    const htmlContent = openaiData.choices[0]?.message?.content;

    if (!htmlContent) {
      throw new Error('No content generated from OpenAI');
    }

    // Query affiliate products to append to the travel brief
    const { data: affiliateProducts, error: affiliateError } = await supabase
      .from('affiliate_products')
      .select('*')
      .eq('is_active', true)
      .order('sort_order', { ascending: true })
      .limit(6);

    if (affiliateError) {
      console.error('Error loading affiliate products:', affiliateError);
    }

    // Generate QR code for TravelPack.ai
    const siteUrl = Deno.env.get('SITE_URL') || 'https://travelpack.ai';
    const qrCodeDataUrl = await generateQRCode(siteUrl);

    // Append affiliate products section and final page to HTML content
    let enhancedHtmlContent = htmlContent;
    
    // Add affiliate products section if available
    if (affiliateProducts && affiliateProducts.length > 0) {
      const affiliateSection = `
<div class="page-break" style="page-break-before: always;"></div>
<div class="affiliate-section" style="background: #f8fafc; padding: 30px; border-radius: 12px; margin: 30px 0;">
  <h2 style="color: #1A1A2E; margin-bottom: 20px; display: flex; align-items: center;">
    🛒 Recommended Travel Essentials
  </h2>
  <p style="color: #4a5568; margin-bottom: 25px;">These carefully selected products can enhance your travel experience. We may earn a commission from purchases made through these links.</p>

  <div class="affiliate-products" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
    ${affiliateProducts.map(product => `
      <div class="affiliate-product" style="background: white; padding: 20px; border-radius: 8px; border: 1px solid #e2e8f0; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
        <h3 style="color: #1A1A2E; margin-bottom: 8px; font-size: 16px;">
          <a href="${product.affiliate_url}" target="_blank" rel="nofollow sponsored" style="color: #2563eb; text-decoration: none;">${product.title}</a>
        </h3>
        <p class="product-price" style="color: #059669; font-weight: bold; margin-bottom: 10px;">${product.price}</p>
        <p style="color: #4a5568; font-size: 14px; margin-bottom: 15px;">${product.description}</p>
        <p><a href="${product.affiliate_url}" target="_blank" rel="nofollow sponsored" class="affiliate-link" style="color: #2563eb; font-weight: 600; text-decoration: none;">View Product →</a></p>
      </div>
    `).join('')}
  </div>

  <p class="affiliate-disclaimer" style="font-size: 12px; color: #6b7280; margin-top: 25px; font-style: italic;">
    <em>Note: We may earn a commission from purchases made through these links at no additional cost to you.</em>
  </p>
</div>`;
      
      // Insert before final page
      enhancedHtmlContent = htmlContent + affiliateSection;
    }

    // Add final page with branding and QR code
    const finalPageSection = `
<div class="page-break" style="page-break-before: always;"></div>
<div class="final-page" style="text-align: center; padding: 50px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 12px; margin: 30px 0;">
  <h1 style="color: white; font-size: 32px; margin-bottom: 20px;">✈️ Travel Pack</h1>
  <p style="font-size: 18px; margin-bottom: 30px; opacity: 0.9;">Your Trip, Planned in Minutes</p>
  
  ${qrCodeDataUrl ? `
    <div style="margin: 30px 0;">
      <img src="${qrCodeDataUrl}" alt="QR Code for TravelPack.ai" style="width: 120px; height: 120px; border: 2px solid white; border-radius: 8px; background: white; padding: 10px;">
      <p style="font-size: 14px; margin-top: 10px; opacity: 0.8;">Scan to visit TravelPack.ai</p>
    </div>
  ` : ''}
  
  <div style="margin: 30px 0; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 8px;">
    <p style="margin-bottom: 10px;"><strong>Need Help?</strong></p>
    <p style="font-size: 16px;">support@travelpack.ai</p>
  </div>
  
  <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid rgba(255,255,255,0.3);">
    <p style="font-size: 12px; opacity: 0.7;">
      Information generated by AI. Please verify details before travel.<br>
      © 2025 TravelPack.ai - All rights reserved.
    </p>
  </div>
</div>`;

    // Add final page to content
    enhancedHtmlContent = enhancedHtmlContent + finalPageSection;

    // Enhance HTML with QR codes for locations
    const finalHtmlContent = await enhanceHtmlWithQRCodes(enhancedHtmlContent, tripData.destinations);

    // Wrap HTML content with proper document structure and comprehensive styling
    const fullHtmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Travel Pack - ${destinationNames}</title>
    <style>
        /* Modern PDF-ready styling */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #fff;
        }
        
        /* Cover Page Styling */
        .cover-page {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 60px 40px;
            text-align: center;
            border-radius: 12px;
            margin-bottom: 40px;
            page-break-after: always;
        }
        
        .cover-branding {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 30px;
            opacity: 0.9;
            letter-spacing: 0.5px;
        }
        
        .cover-title {
            font-size: 42px;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .cover-subtitle {
            font-size: 20px;
            margin-bottom: 30px;
            opacity: 0.9;
        }
        
        .cover-tagline {
            font-size: 16px;
            opacity: 0.8;
            border-top: 1px solid rgba(255,255,255,0.3);
            padding-top: 20px;
            margin-top: 30px;
        }
        
        /* Typography */
        h1 {
            color: #1A1A2E;
            font-size: 32px;
            font-weight: bold;
            border-bottom: 3px solid #2563eb;
            padding-bottom: 15px;
            margin: 40px 0 30px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        h2 {
            color: #1e40af;
            font-size: 24px;
            font-weight: 600;
            margin: 35px 0 20px 0;
            padding-left: 15px;
            border-left: 4px solid #3b82f6;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        h3 {
            color: #1e3a8a;
            font-size: 18px;
            font-weight: 600;
            margin: 25px 0 15px 0;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        h4 {
            color: #374151;
            font-size: 16px;
            font-weight: 600;
            margin: 20px 0 10px 0;
        }
        
        /* Card-based Layout */
        .card {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 25px;
            margin: 25px 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .card-header {
            color: #1A1A2E;
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        /* Two-column layout for larger sections */
        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin: 25px 0;
        }
        
        /* Day itinerary styling */
        .day-header {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin: 30px 0 20px 0;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
        }
        
        .activity {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            border-left: 4px solid #10b981;
        }
        
        .activity-time {
            color: #059669;
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 8px;
        }
        
        .activity-title {
            color: #1A1A2E;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .activity-description {
            color: #4a5568;
            margin-bottom: 10px;
            line-height: 1.5;
        }
        
        .activity-why {
            color: #6366f1;
            font-style: italic;
            font-size: 14px;
            margin-bottom: 8px;
        }
        
        .activity-cost {
            color: #059669;
            font-weight: 600;
            font-size: 14px;
        }
        
        /* Lists and checkboxes */
        ul, ol {
            padding-left: 25px;
            margin: 15px 0;
        }
        
        li {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        
        .checklist {
            list-style: none;
            padding-left: 0;
        }
        
        .checklist li {
            padding-left: 25px;
            position: relative;
        }
        
        .checklist li:before {
            content: "☐";
            position: absolute;
            left: 0;
            color: #6b7280;
            font-size: 16px;
        }
        
        /* Special sections */
        .highlight {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-left: 4px solid #f59e0b;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .tip {
            background: #ecfdf5;
            border: 1px solid #10b981;
            border-left: 4px solid #10b981;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .emergency {
            background: #fee2e2;
            border: 1px solid #ef4444;
            border-left: 4px solid #ef4444;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .safety {
            background: #fef2f2;
            border: 1px solid #ef4444;
            border-left: 4px solid #ef4444;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        /* Budget table styling */
        .budget-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .budget-table th {
            background: #1A1A2E;
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }
        
        .budget-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .budget-table tr:nth-child(even) {
            background: #f8fafc;
        }
        
        /* Language phrases styling */
        .phrase {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 12px;
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .phrase-english {
            font-weight: 600;
            color: #1A1A2E;
        }
        
        .phrase-local {
            color: #2563eb;
            font-weight: 500;
        }
        
        .phrase-phonetic {
            color: #6b7280;
            font-style: italic;
            font-size: 14px;
        }
        
        /* Location blocks with QR codes */
        .location-block {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .qr-code-container {
            text-align: center;
            margin: 15px 0;
        }
        
        .qr-code-container img {
            display: block;
            margin: 0 auto;
            border: 1px solid #e5e7eb;
            border-radius: 4px;
        }
        
        .qr-caption {
            font-size: 12px;
            color: #6b7280;
            margin: 8px 0 0 0;
            font-style: italic;
        }
        
        /* Persona-specific styling */
        .persona-badge {
            display: inline-block;
            background: #3b82f6;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin: 10px 0;
        }
        
        /* Print/PDF optimizations */
        @media print {
            body { 
                margin: 0; 
                padding: 15px; 
                font-size: 12px;
            }
            
            h1, h2, h3 { 
                page-break-after: avoid; 
            }
            
            .page-break { 
                page-break-before: always; 
            }
            
            .card, .activity, .location-block { 
                page-break-inside: avoid; 
                background: white !important;
                border: 1px solid #ccc !important;
            }
            
            .affiliate-product {
                page-break-inside: avoid;
                background: white !important;
                border: 1px solid #ccc !important;
            }
            
            .cover-page {
                background: #667eea !important;
            }
            
            .final-page {
                background: #667eea !important;
            }
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .two-column {
                grid-template-columns: 1fr;
            }
            
            body {
                padding: 15px;
            }
            
            .cover-title {
                font-size: 28px;
            }
            
            .cover-subtitle {
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <!-- Cover Page -->
    <div class="cover-page">
        <div class="cover-branding">TravelPack.ai ✈️</div>
        <div class="cover-title">TravelPack.ai for ${destinationNames}</div>
        <div class="cover-subtitle">
            ${tripData.start_date} to ${tripData.end_date} • ${tripData.persona}
        </div>
        <div class="persona-badge">${tripData.persona}</div>
        <div class="cover-tagline">Generated by TravelPack.ai — Your Trip, Planned in Minutes</div>
    </div>

    ${finalHtmlContent}
</body>
</html>`;

    // Generate unique filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `travel-pack-${client_reference_id}-${timestamp}`;

    // Save HTML to storage
    const { data: htmlUpload, error: htmlError } = await supabase.storage
      .from('travel-packs')
      .upload(`${filename}.html`, new TextEncoder().encode(fullHtmlContent), {
        contentType: 'text/html',
        upsert: true
      });

    if (htmlError) {
      console.error('HTML upload error:', htmlError);
      throw new Error('Failed to save HTML file');
    }

    // Generate real PDF from HTML content
    let pdfBytes: Uint8Array;
    
    try {
      pdfBytes = await renderPdfWithPdfShift(fullHtmlContent);
    } catch (e) {
      console.error('PDFShift failed:', e);
      // Try DocRaptor if configured
      const hasDocRaptor = !!Deno.env.get("DOC_RAPTOR_API_KEY");
      if (!hasDocRaptor) {
        console.error('No fallback PDF service configured');
        throw new Error(`PDF generation failed: ${e.message}`);
      }
      
      try {
        console.log('Attempting DocRaptor fallback...');
        pdfBytes = await renderPdfWithDocRaptor(fullHtmlContent);
      } catch (docRaptorError) {
        console.error('DocRaptor fallback also failed:', docRaptorError);
        throw new Error(`All PDF services failed. PDFShift: ${e.message}, DocRaptor: ${docRaptorError.message}`);
      }
    }

    // Upload the real PDF bytes
    const { data: pdfUpload, error: pdfError } = await supabase.storage
      .from('travel-packs')
      .upload(`${filename}.pdf`, pdfBytes, {
        contentType: 'application/pdf',
        upsert: true
      });

    if (pdfError) {
      console.error('PDF upload error:', pdfError);
      throw new Error('Failed to save PDF file');
    }

    // Get public URLs
    const { data: htmlUrl } = supabase.storage
      .from('travel-packs')
      .getPublicUrl(htmlUpload.path);

    const { data: pdfUrl } = supabase.storage
      .from('travel-packs')
      .getPublicUrl(pdfUpload.path);

    // Save to travel_briefs table
    const { error: briefError } = await supabase
      .from('travel_briefs')
      .upsert({
        pending_session_id: client_reference_id,
        customer_email: sessionData.customer_email,
        plan_type: sessionData.plan_type,
        persona: tripData.persona,
        passport_country_code: tripData.passport_country_code,
        passport_country_label: tripData.passport_country_label,
        start_date: tripData.start_date,
        end_date: tripData.end_date,
        destinations: tripData.destinations,
        budget: tripData.budget,
        html_url: htmlUrl.publicUrl,
        pdf_url: pdfUrl.publicUrl,
      });

    if (briefError) {
      console.error('Brief save error:', briefError);
    }

    // Update session status
    await supabase
      .from('pending_sessions')
      .update({ 
        status: 'ready',
        brief_id: client_reference_id
      })
      .eq('id', client_reference_id);

    // Log performance
    await supabase
      .from('logs_performance')
      .insert({
        operation: 'generate_travel_brief',
        duration_ms: Date.now(), // In production, calculate actual duration
        meta: {
          client_reference_id,
          persona: tripData.persona,
          destinations: tripData.destinations.length,
          activity_preferences: tripData.activity_preferences?.length || 0,
          force,
          admin: isAdminForced
        }
      });

    return new Response(
      JSON.stringify({
        html_url: htmlUrl.publicUrl,
        pdf_url: pdfUrl.publicUrl,
        generated_at: new Date().toISOString()
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('Error generating travel brief:', error);
    
    // Log error
    try {
      const supabase = createClient(
        Deno.env.get('SUPABASE_URL')!,
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
      );
      
      await supabase
        .from('logs_errors')
        .insert({
          level: 'error',
          message: error.message,
          meta: {
            function: 'generate_travel_brief',
            stack: error.stack
          }
        });
    } catch (logError) {
      console.error('Failed to log error:', logError);
    }
    
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});